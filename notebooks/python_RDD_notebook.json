{"paragraphs":[{"text":"%pyspark #utilizamos el interprete de pyspark\nfrom pyspark.sql.functions import monotonically_increasing_id \nfrom pyspark.sql.window import Window\nfrom pyspark.sql.functions import *\nfrom pyspark.sql.types import *\nimport sys\n\nJOIN_COLUMN = 'rn'\n\n#definicion de una funcion que aplica un join entre dos dataframes y devuelve\n#otro data frame como resultado\ndef joinDataFrames(df, df2, joinCol) :\n    return df.join(df2, joinCol) \n\n    \n    \n    \n            \n#funcion para filtrar por los accidentes donde hubo heridos utilizando un iterador\ndef filterInjuried(RDDrows) :\n    lista = []\n    for i in RDDrows:\n        if i[10] == True:\n            lista.append(i)\n    return lista\n\n#funcion para el filtrado y formateo del dataframe resultado utilizando map partitions\ndef filterMapPartitions(df) : \n     dfRES = df.rdd.mapPartitions(filterInjuried). \\\n     map(lambda row : (row[21], row[22], row[23])). \\\n     toDF([\"Mark\", \"Model\", \"Color\"])\n     return dfRES\n\n\n#funcion para filtrar por accidentes donde hubo heridos y darle formato\ndef filterDF(df) : \n    dfRES = df.rdd.filter(lambda x: x['personal_injury'] == True) \\\n    .map(lambda row: (row['make'],row['model'],row['color'],row['personal_injury'])) \\\n    .toDF(['Make', 'Model', 'Color'])\n    return dfRES\n  \n#origen de datos\ndata =\"/data/slice_violations.csv\"\n\n#dataframe con los datos cargados\ndf = spark.read.format(\"csv\").options(header='true', inferschema='true').load(data)\ndf.printSchema()\ndf.limit(1).show()","dateUpdated":"2018-11-07T21:36:41+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- date_of_stop: string (nullable = true)\n |-- time_of_stop: string (nullable = true)\n |-- agency: string (nullable = true)\n |-- subagency: string (nullable = true)\n |-- description: string (nullable = true)\n |-- location: string (nullable = true)\n |-- latitude: string (nullable = true)\n |-- longitude: string (nullable = true)\n |-- accident: boolean (nullable = true)\n |-- belts: boolean (nullable = true)\n |-- personal_injury: boolean (nullable = true)\n |-- property_damage: boolean (nullable = true)\n |-- fatal: boolean (nullable = true)\n |-- commercial_license: boolean (nullable = true)\n |-- hazmat: string (nullable = true)\n |-- commercial_vehicle: string (nullable = true)\n |-- alcohol: string (nullable = true)\n |-- work_zone: string (nullable = true)\n |-- state: string (nullable = true)\n |-- vehicletype: string (nullable = true)\n |-- year: string (nullable = true)\n |-- make: string (nullable = true)\n |-- model: string (nullable = true)\n |-- color: string (nullable = true)\n |-- violation_type: string (nullable = true)\n |-- charge: string (nullable = true)\n |-- article: string (nullable = true)\n |-- contributed_to_accident: string (nullable = true)\n |-- race: string (nullable = true)\n |-- gender: string (nullable = true)\n |-- driver_city: string (nullable = true)\n |-- driver_state: string (nullable = true)\n |-- dl_state: string (nullable = true)\n |-- arrest_type: string (nullable = true)\n |-- geolocation: string (nullable = true)\n\n+------------+------------+------+--------------------+--------------------+---------------+--------+---------+--------+-----+---------------+---------------+-----+------------------+------+------------------+-------+---------+-----+---------------+----+----+-----+-----+--------------+---------+--------------------+-----------------------+-----+------+-----------+------------+--------+-----------------+-----------+\n|date_of_stop|time_of_stop|agency|           subagency|         description|       location|latitude|longitude|accident|belts|personal_injury|property_damage|fatal|commercial_license|hazmat|commercial_vehicle|alcohol|work_zone|state|    vehicletype|year|make|model|color|violation_type|   charge|             article|contributed_to_accident| race|gender|driver_city|driver_state|dl_state|      arrest_type|geolocation|\n+------------+------------+------+--------------------+--------------------+---------------+--------+---------+--------+-----+---------------+---------------+-----+------------------+------+------------------+-------+---------+-----+---------------+----+----+-----+-----+--------------+---------+--------------------+-----------------------+-----+------+-----------+------------+--------+-----------------+-----------+\n|  2013-09-24|    17:11:00|   MCP|3rd district, Sil...|DRIVING VEHICLE O...|8804 FLOWER AVE|    null|     null|   false|false|          false|          false|false|             false| false|             false|  false|    false|   MD|02 - Automobile|2008|FORD|   4S|BLACK|      Citation|13-401(h)|Transportation Ar...|                  false|BLACK|     M|TAKOMA PARK|          MD|      MD|A - Marked Patrol|       null|\n+------------+------------+------+--------------------+--------------------+---------------+--------+---------+--------+-----+---------------+---------------+-----+------------------+------+------------------+-------+---------+-----+---------------+----+----+-----+-----+--------------+---------+--------------------+-----------------------+-----+------+-----------+------------+--------+-----------------+-----------+\n\n"}]},"apps":[],"jobName":"paragraph_1541619252190_-2073783155","id":"20181102-083019_112455572","dateCreated":"2018-11-07T19:34:12+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:224","user":"anonymous","dateFinished":"2018-11-07T21:36:41+0000","dateStarted":"2018-11-07T21:36:41+0000"},{"text":"%pyspark\n\n#RDD donde filtramos los campos donde haya habido gente herida y agrupamos por marca,modelo y color de coche.\n#tambien hacemos un mapeo KEY - VALUE en el que asociamos marca,modelo y color como KEY y (1) como VALUE.\n#despues hacemos un reduce by key, para que las que tengan las mismas key, ejecuten la funcion lambda declarada (a+b).\n#por lo que el resultado sera el sumatorio de todos los VALUES (1).\n# despues intercambiamos las columnas con un map, para que aparezca primero el conteo y despues la marca,modelo y color,\n#y ordenamos mediante sortBy, primero x la primera columna en orden descendente (-1 * [0]) y despues por la segunda columna (x[1])\n\n#dfFiltered=filterMapPartitions(df)  #filtrado utilizando un filter sobre el data frame \ndfFiltered=filterDF(df)  #filtrado utilizando map partitions sobre el data frame \n \n#mapeamos marca, modelo y color (KEY) a 1 (VALUE) \ngroupByRDD = dfFiltered.rdd \\\n.map(lambda x: ((x[0],x[1],x[2]), 1)) \\\n.reduceByKey(lambda a, b: a + b) \\\n.map(lambda r:(r[1],r[0])) \\\n.sortBy(lambda x: (-1 * x[0], x[1]))\n\n#generamos un dataframe final desde el RDD anterior con la cabecera\n# con \".persist()\" obligamos a que se caché la información del dataframe en memoria\n# lo cual nos viene bien ya que vamos a hacer varias operaciones con el\ndfRES = groupByRDD.toDF(['Count','Mark - Model - Color']).persist()\n\n#mostramos el dataframe\ndfRES.show()\n","dateUpdated":"2018-11-07T21:36:41+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{"0":{"graph":{"mode":"table","height":347.812,"optionOpen":false}}},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----+--------------------+\n|Count|Mark - Model - Color|\n+-----+--------------------+\n|    6|  [SUNNY,NINGBO,RED]|\n|    5|[ACURA,INTEGRA,BL...|\n|    5|[CHRYSLER,SEBRING...|\n|    5|[FORD,EXPLORER,GR...|\n|    5|  [HONDA,CIVIC,GRAY]|\n|    5|  [MITS,LANCER,GRAY]|\n|    4|[CHRYSLER,PACIFIC...|\n|    4|  [DODGE,DAKOTA,RED]|\n|    4|  [HONDA,PILOT,GRAY]|\n|    4|   [KIA,TRUCK,BLACK]|\n|    3|   [ACUR,RDX,SILVER]|\n|    3| [HONDA,ACCORD,BLUE]|\n|    3|[INFINITI,SEDAN,G...|\n|    3| [TOYO,CAMRY,SILVER]|\n|    3|[TOYOTA,COROLLA,S...|\n|    3|[TOYOTA,COROLLA,TAN]|\n|    2|     [CHEV,SU,BLACK]|\n|    2|[FORD,EXPEDITION,...|\n|    2|     [HOND,4S,BLACK]|\n|    2| [HONDA,CIVIC,BLACK]|\n+-----+--------------------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1541619252191_-2074167904","id":"20181102-083051_265970476","dateCreated":"2018-11-07T19:34:12+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:225","user":"anonymous","dateFinished":"2018-11-07T21:36:41+0000","dateStarted":"2018-11-07T21:36:41+0000"},{"text":"%pyspark\n\n#añadimos al dataframe de los datos la columna \"dr\" aplicando un DENSE_RANK()\n#por Count descendientemente\nwindowSpecDR = Window.orderBy(dfRES.Count.desc())\ndfDataDR = dfRES.withColumn(\"dr\", dense_rank().over(windowSpecDR))\ndfDataDR.show()","dateUpdated":"2018-11-07T21:36:41+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----+--------------------+---+\n|Count|Mark - Model - Color| dr|\n+-----+--------------------+---+\n|    6|  [SUNNY,NINGBO,RED]|  1|\n|    5|[ACURA,INTEGRA,BL...|  2|\n|    5|[CHRYSLER,SEBRING...|  2|\n|    5|[FORD,EXPLORER,GR...|  2|\n|    5|  [HONDA,CIVIC,GRAY]|  2|\n|    5|  [MITS,LANCER,GRAY]|  2|\n|    4|[CHRYSLER,PACIFIC...|  3|\n|    4|  [DODGE,DAKOTA,RED]|  3|\n|    4|  [HONDA,PILOT,GRAY]|  3|\n|    4|   [KIA,TRUCK,BLACK]|  3|\n|    3|   [ACUR,RDX,SILVER]|  4|\n|    3| [HONDA,ACCORD,BLUE]|  4|\n|    3|[INFINITI,SEDAN,G...|  4|\n|    3| [TOYO,CAMRY,SILVER]|  4|\n|    3|[TOYOTA,COROLLA,S...|  4|\n|    3|[TOYOTA,COROLLA,TAN]|  4|\n|    2|     [CHEV,SU,BLACK]|  5|\n|    2|[FORD,EXPEDITION,...|  5|\n|    2|     [HOND,4S,BLACK]|  5|\n|    2| [HONDA,CIVIC,BLACK]|  5|\n+-----+--------------------+---+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1541619252191_-2074167904","id":"20181102-083131_1482753958","dateCreated":"2018-11-07T19:34:12+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:226","user":"anonymous","dateFinished":"2018-11-07T21:36:41+0000","dateStarted":"2018-11-07T21:36:41+0000"},{"text":"%pyspark\n\n#añadimos al dataframe la columna \"rn\" aplicando un ROW_NUMBER() ordenando\n#por Count de manera descendente y \"marca -modelo-color\" ascendente\nwindowSpecRN = Window.orderBy(dfRES.Count.desc(),dfRES['Mark - Model - Color'])\ndfDataRN = dfRES.withColumn('rn', row_number().over(windowSpecRN))\ndfDataRN.show()\n","dateUpdated":"2018-11-07T21:36:41+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----+--------------------+---+\n|Count|Mark - Model - Color| rn|\n+-----+--------------------+---+\n|    6|  [SUNNY,NINGBO,RED]|  1|\n|    5|[ACURA,INTEGRA,BL...|  2|\n|    5|[CHRYSLER,SEBRING...|  3|\n|    5|[FORD,EXPLORER,GR...|  4|\n|    5|  [HONDA,CIVIC,GRAY]|  5|\n|    5|  [MITS,LANCER,GRAY]|  6|\n|    4|[CHRYSLER,PACIFIC...|  7|\n|    4|  [DODGE,DAKOTA,RED]|  8|\n|    4|  [HONDA,PILOT,GRAY]|  9|\n|    4|   [KIA,TRUCK,BLACK]| 10|\n|    3|   [ACUR,RDX,SILVER]| 11|\n|    3| [HONDA,ACCORD,BLUE]| 12|\n|    3|[INFINITI,SEDAN,G...| 13|\n|    3| [TOYO,CAMRY,SILVER]| 14|\n|    3|[TOYOTA,COROLLA,S...| 15|\n|    3|[TOYOTA,COROLLA,TAN]| 16|\n|    2|     [CHEV,SU,BLACK]| 17|\n|    2|[FORD,EXPEDITION,...| 18|\n|    2|     [HOND,4S,BLACK]| 19|\n|    2| [HONDA,CIVIC,BLACK]| 20|\n+-----+--------------------+---+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1541619252191_-2074167904","id":"20181102-083257_11224372","dateCreated":"2018-11-07T19:34:12+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:227","user":"anonymous","dateFinished":"2018-11-07T21:36:42+0000","dateStarted":"2018-11-07T21:36:41+0000"},{"text":"%pyspark\n\n#aplicamos otro ROW_NUMBER, pero esta vez sobre el dataframe donde previamente hemos aplicado el DENSE_RANK()\n# para seleccionar las primeras filas de cada conjunto de datos en el Count\nwindow_RN_over_DR = Window.partitionBy(dfDataDR.dr).orderBy(dfDataDR.dr.desc())\ndfData_RN_over_DR = dfDataDR.withColumn('rn', row_number().over(window_RN_over_DR))\ndfData_RN_over_DR.show()\n","dateUpdated":"2018-11-07T21:36:41+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----+--------------------+---+---+\n|Count|Mark - Model - Color| dr| rn|\n+-----+--------------------+---+---+\n|    6|  [SUNNY,NINGBO,RED]|  1|  1|\n|    5|[ACURA,INTEGRA,BL...|  2|  1|\n|    5|[CHRYSLER,SEBRING...|  2|  2|\n|    5|[FORD,EXPLORER,GR...|  2|  3|\n|    5|  [HONDA,CIVIC,GRAY]|  2|  4|\n|    5|  [MITS,LANCER,GRAY]|  2|  5|\n|    4|[CHRYSLER,PACIFIC...|  3|  1|\n|    4|  [DODGE,DAKOTA,RED]|  3|  2|\n|    4|  [HONDA,PILOT,GRAY]|  3|  3|\n|    4|   [KIA,TRUCK,BLACK]|  3|  4|\n|    3|   [ACUR,RDX,SILVER]|  4|  1|\n|    3| [HONDA,ACCORD,BLUE]|  4|  2|\n|    3|[INFINITI,SEDAN,G...|  4|  3|\n|    3| [TOYO,CAMRY,SILVER]|  4|  4|\n|    3|[TOYOTA,COROLLA,S...|  4|  5|\n|    3|[TOYOTA,COROLLA,TAN]|  4|  6|\n|    2|     [CHEV,SU,BLACK]|  5|  1|\n|    2|[FORD,EXPEDITION,...|  5|  2|\n|    2|     [HOND,4S,BLACK]|  5|  3|\n|    2| [HONDA,CIVIC,BLACK]|  5|  4|\n+-----+--------------------+---+---+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1541619252191_-2074167904","id":"20181102-083307_1568062411","dateCreated":"2018-11-07T19:34:12+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:228","user":"anonymous","dateFinished":"2018-11-07T21:36:42+0000","dateStarted":"2018-11-07T21:36:42+0000"},{"text":"%pyspark\n\n#nos quedamos solo con las filas donde rn sea igual a 1 para despreciar el resto\ndfData_RN_over_DR_filtered = dfData_RN_over_DR.where(col('rn') == 1).drop('rn').drop('dr')\nprint(\" *** RANKING BY GROUP OF COUNT ***\")\ndfData_RN_over_DR_filtered.show()\n\n#primeras ocurrencias de cada conjunto de número de accidentes:\n#ejemplo de lo que debe mostrar:\n#+-----+--------------------+---+---+\n#|Count|Mark - Model - Color| dr| rn|\n#+-----+--------------------+---+---+\n#|    6|  [SUNNY,NINGBO,RED]|  1|  1|<---\n#|    5|[ACURA,INTEGRA,BL...|  2|  1|<---\n#|    5|[CHRYSLER,SEBRING...|  2|  2|\n#|    5|[FORD,EXPLORER,GR...|  2|  3|\n#|    5|  [HONDA,CIVIC,GRAY]|  2|  4|\n#|    5|  [MITS,LANCER,GRAY]|  2|  5|\n#|    4|[CHRYSLER,PACIFIC...|  3|  1|<---\n#|    4|  [DODGE,DAKOTA,RED]|  3|  2|\n#|    4|  [HONDA,PILOT,GRAY]|  3|  3|\n#|    4|   [KIA,TRUCK,BLACK]|  3|  4|\n#|    3|   [ACUR,RDX,SILVER]|  4|  1|<---\n#|    3| [HONDA,ACCORD,BLUE]|  4|  2|\n#|    3|[INFINITI,SEDAN,G...|  4|  3|\n#|    3| [TOYO,CAMRY,SILVER]|  4|  4|\n#|    3|[TOYOTA,COROLLA,S...|  4|  5|\n#|    3|[TOYOTA,COROLLA,TAN]|  4|  6|\n#|    2|     [CHEV,SU,BLACK]|  5|  1|<---\n#|    2|[FORD,EXPEDITION,...|  5|  2|\n#|    2|     [HOND,4S,BLACK]|  5|  3|\n#|    2| [HONDA,CIVIC,BLACK]|  5|  4|\n#+-----+--------------------+---+---+\n\n","dateUpdated":"2018-11-07T21:36:41+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":" *** RANKING BY GROUP OF COUNT ***\n+-----+--------------------+\n|Count|Mark - Model - Color|\n+-----+--------------------+\n|    6|  [SUNNY,NINGBO,RED]|\n|    5|[ACURA,INTEGRA,BL...|\n|    4|[CHRYSLER,PACIFIC...|\n|    3|   [ACUR,RDX,SILVER]|\n|    2|     [CHEV,SU,BLACK]|\n|    1|    [ACURA,2D,GREEN]|\n+-----+--------------------+\n\n"}]},"apps":[],"jobName":"paragraph_1541619252192_-2088403613","id":"20181102-083328_2003545781","dateCreated":"2018-11-07T19:34:12+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:229","user":"anonymous","dateFinished":"2018-11-07T21:36:42+0000","dateStarted":"2018-11-07T21:36:42+0000"},{"text":"%pyspark\n\n#para establecer un ranking en base al numero de ocurrencias y poder mostrar despues\n#del join los 3 primeros coches con mas accidentes\n\nschema = StructType([StructField(\"rn\", IntegerType(), True)])\n\ndfNew2 = spark.createDataFrame(sc.parallelize([1,2,3]).map(lambda x: (x,)),schema)\ndfNew2.show()\n","dateUpdated":"2018-11-07T21:36:41+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+\n| rn|\n+---+\n|  1|\n|  2|\n|  3|\n+---+\n\n"}]},"apps":[],"jobName":"paragraph_1541619252192_-2088403613","id":"20181102-083349_539411107","dateCreated":"2018-11-07T19:34:12+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:230","user":"anonymous","dateFinished":"2018-11-07T21:36:42+0000","dateStarted":"2018-11-07T21:36:42+0000"},{"text":"%pyspark\n\n#hacemos el join de los dos dataframes llamando a la funcion joinDataFrames\n#y cruzando por la columna \"rn\" para que nos saque los 3 coches con mas\n#accidentes\nDF_join = joinDataFrames(dfDataRN,dfNew2,JOIN_COLUMN)\n\n\n#renombramos la columna\nDF_joinRES = DF_join.orderBy(JOIN_COLUMN).withColumnRenamed(JOIN_COLUMN, \"Ranking\")\nprint(\" *** RANKING ***\")\nDF_joinRES.show()\n\n#ejemplo de lo que debe mostrar:\n#+-----+--------------------+---+\n#|Count|Mark - Model - Color| rn|\n#+-----+--------------------+---+\n#|    6|  [SUNNY,NINGBO,RED]|  1|<---\n#|    5|[ACURA,INTEGRA,BL...|  2|<---\n#|    5|[CHRYSLER,SEBRING...|  3|<---\n#|    5|[FORD,EXPLORER,GR...|  4|\n#|    5|  [HONDA,CIVIC,GRAY]|  5|\n#|    5|  [MITS,LANCER,GRAY]|  6|\n","dateUpdated":"2018-11-07T21:36:41+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":" *** RANKING ***\n+-------+-----+--------------------+\n|Ranking|Count|Mark - Model - Color|\n+-------+-----+--------------------+\n|      1|    6|  [SUNNY,NINGBO,RED]|\n|      2|    5|[ACURA,INTEGRA,BL...|\n|      3|    5|[CHRYSLER,SEBRING...|\n+-------+-----+--------------------+\n\n"}]},"apps":[],"jobName":"paragraph_1541619252192_-2088403613","id":"20181102-083447_159276300","dateCreated":"2018-11-07T19:34:12+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:231","user":"anonymous","dateFinished":"2018-11-07T21:36:42+0000","dateStarted":"2018-11-07T21:36:42+0000"},{"text":"%pyspark\n","dateUpdated":"2018-11-07T20:29:06+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1541619252192_-2088403613","id":"20181102-083505_1913884557","dateCreated":"2018-11-07T19:34:12+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:232","user":"anonymous"}],"name":"python_RDD_notebook","id":"2DVH7VRKH","angularObjects":{"2DVA5RUPM:shared_process":[],"2DUWVS4J9:shared_process":[],"2DVFKUXMA:shared_process":[],"2DW2MK83K:shared_process":[],"2DTS2XMEC:shared_process":[],"2DUW5HEBR:shared_process":[],"2DV1PB2MP:shared_process":[],"2DV4NB98U:shared_process":[],"2DWU4EJBN:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}